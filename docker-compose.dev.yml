version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: threatrecon-postgres
    environment:
      POSTGRES_DB: threatrecon
      POSTGRES_USER: threatrecon
      POSTGRES_PASSWORD: threatrecon_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - threatrecon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U threatrecon"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: threatrecon-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - threatrecon-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: threatrecon-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://threatrecon:threatrecon_dev@postgres:5432/threatrecon
      REDIS_URL: redis://redis:6379
      JWT_SECRET: threatrecon_dev_secret_key_change_in_production
      FRONTEND_URL: http://localhost:3000
      LOG_LEVEL: debug
    ports:
      - "3001:3001"
    volumes:
      - ./src:/app/src
      - ./scenarios:/app/scenarios
      - ./templates:/app/templates
      - ./logs:/app/logs
      - ./results:/app/results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - threatrecon-network
    restart: unless-stopped

  # Frontend Next.js App
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: threatrecon-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app/src
      - ./src/shared:/app/src/shared
    depends_on:
      - backend
    networks:
      - threatrecon-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: threatrecon-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - threatrecon-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  threatrecon-network:
    driver: bridge
